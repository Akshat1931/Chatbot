from chatterbot import ChatBot
from chatterbot.trainers import ChatterBotCorpusTrainer, ListTrainer
import random
import wikipediaapi
import lyricsgenius
import requests
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
import os
import json
import spacy
from textblob import TextBlob
import gensim
from gensim import models
from transformers import pipeline
import openai

# Download spaCy language model
nlp = spacy.load("en_core_web_sm")

# Download NLTK resources
nltk.download('punkt')
nltk.download('stopwords')


# OpenWeatherMap API key (replace with your actual API key)
api_key = '38ac4aa573b7d79f9a62578684467725'

# Create a new chatbot instance
chatbot = ChatBot('MyBot')

# Create a new trainer for the chatbot
trainer = ChatterBotCorpusTrainer(chatbot)

# Train the chatbot on English language data
trainer.train('chatterbot.corpus.english')

# Create a list trainer to allow the chatbot to learn from user interactions
list_trainer = ListTrainer(chatbot)

# Predefined characteristics and responses
characteristics = {
    "greeting": ["hello", "hi", "hey", "howdy", "greetings"],
    "goodbye": ["goodbye", "bye", "see you later", "farewell"],
    "thanks": ["thank you", "thanks", "appreciate it"],
}

responses = {
    "greeting": "Hello! How can I assist you today?",
    "goodbye": "Goodbye! If you have more questions, feel free to ask.",
    "thanks": "You're welcome! If you need more help, just let me know.",
}

# Initialize empty_responses
empty_responses = ["Hello there!", "How can I assist you?", "Feel free to ask anything!"]

# Create a Wikipedia API object with a user agent specified
wiki_wiki = wikipediaapi.Wikipedia(user_agent="MyCoolBot/1.0")

# Initialize the LyricsGenius client
genius = lyricsgenius.Genius("oXc1AI8rk3vOxoFYVg1IA6L9So252WEKyhN8gO046KghIj-9Rk-_SWM-Btbey7A3D4VsCa7NFVAk4j-2AdLZUg")

# Function to fetch information from Wikipedia
def fetch_wikipedia_info(query):
    wiki_page = wiki_wiki.page(query)
    if wiki_page.exists():
        return wiki_page.summary
    else:
        return "I couldn't find any information on that topic."

# Function to fetch song lyrics
def fetch_song_lyrics(song_title):
    song = genius.search_song(song_title)
    if song:
        return song.lyrics
    else:
        return "I couldn't find the lyrics for that song."

# Function to fetch current weather information
def fetch_current_weather(city_name):
    base_url = "https://api.openweathermap.org/data/2.5/weather"
    params = {
        'q': city_name,
        'appid': '38ac4aa573b7d79f9a62578684467725',
        'units': 'metric',  # Use 'imperial' for Fahrenheit
    }

    response = requests.get(base_url, params=params)

    if response.status_code == 200:
        data = response.json()
        main_data = data['main']
        weather_data = data['weather'][0]

        weather_description = weather_data['description']
        temperature = main_data['temp']
        humidity = main_data['humidity']

        return f"Current weather in {city_name}: {weather_description}, Temperature: {temperature}Â°C, Humidity: {humidity}%"
    else:
        return "Unable to fetch weather information."

# Define custom responses
custom_responses = {
    "fine": "That's good to hear!",
    "what do you mean": "I mean, have you felt good today?",
    "Do you hate me?": "I don't hate. I'm here to assist.",
    "nice": "That's great!",
    "who are you": "I'm a friendly chatbot designed to assist you.",
    "tell me a joke": "Sure, here's one: Why did the computer keep freezing? Because it left its Windows open!",
    "how are you": "I'm just a computer program, but I'm here to help!",
    "what's your favorite color": "I don't have a favorite color. How about you?",
    "what's the meaning of life": "The meaning of life is a philosophical question with many different interpretations. What's your take on it?",
    "where do you live": "I exist in the digital world, so you can find me wherever you have an internet connection.",
    "tell me a fun fact": "Sure! Did you know that honey never spoils? Archaeologists have found pots of honey in ancient Egyptian tombs that are over 3,000 years old and still perfectly edible.",
    "what's the weather like today": "I'm sorry, I can't provide real-time weather information. You can check a weather website or app for the latest updates.",
    "can you sing a song": "I can't sing, but I can provide song lyrics or discuss music. What's your favorite song?",
    "what's your favorite food": "I don't eat, so I don't have a favorite food. But I can help you find recipes or answer food-related questions.",
    # Add more user inputs and their corresponding responses here
}

# File path for storing and loading responses
RESPONSES_FILE_PATH = 'learned_responses.json'

# Load existing responses from the file
def load_responses():
    if os.path.exists(RESPONSES_FILE_PATH):
        try:
            with open(RESPONSES_FILE_PATH, 'r') as file:
                return json.load(file)
        except (json.JSONDecodeError, FileNotFoundError):
            # Handle the case where the file is empty or not valid JSON
            return {}
    else:
        return {}

# Save responses to the file
def save_responses(responses_dict):
    with open(RESPONSES_FILE_PATH, 'w') as file:
        json.dump(responses_dict, file, indent=2)

# Merge existing responses with new ones
def update_responses(existing_responses, new_responses):
    for key, value in new_responses.items():
        if key not in existing_responses:
            existing_responses[key] = value
    return existing_responses

# Maintain a conversation history
conversation_history = []

print("Chatbot: Hi! I'm your friendly chatbot. You can type 'exit' to end the conversation.")
responses_dict = load_responses()
while True:
    user_input = input("You: ").lower()
    
    # Add the current input to the conversation history
    conversation_history.append(user_input)

    if user_input == 'exit':
        # Save responses before exiting
        save_responses(responses_dict)
        break

    if not user_input:
        # Handle empty input with a friendly response
        response = random.choice(empty_responses)
    else:
        # Check for specific user inputs or triggers
        if user_input in characteristics['greeting']:
            response = responses['greeting']
        elif user_input in characteristics['goodbye']:
            response = responses['goodbye']
        elif user_input in characteristics['thanks']:
            response = responses['thanks']
        elif "tell me a joke" in user_input:
            response = "Sure, here's one: Why did the computer keep freezing? Because it left its Windows open!"
        elif "weather in" in user_input:
            city_name = user_input.replace("weather in", "").strip()
            response = fetch_current_weather(city_name)
        elif user_input in custom_responses:
            response = custom_responses[user_input]
        else:
            # Get a response from the chatbot based on the current user input
            response = chatbot.get_response(user_input)
            
            # If the confidence is low, provide an option to teach the correct response
            if response.confidence < 0.3:
                print("Chatbot: I'm not very confident in my response. Would you like to teach me the correct answer?")
                user_decision = input("You: ").lower()
                if "yes" in user_decision:
                    print("Chatbot: Great! Please provide the correct response.")
                    correct_response = input("You: ")
                    response = correct_response
                    # Update and learn from the correction
                    list_trainer.train([user_input, response])
                    responses_dict = update_responses(responses_dict, {user_input: response})
                else:
                    # Suggest a generic response based on the user's input
                    response = f"I will try my best to learn more about this world so i can keep up my chats with you, btw how is your day?"

            # Update and learn from user input
            if isinstance(response, str):
                list_trainer.train([user_input, response])
                responses_dict = update_responses(responses_dict, {user_input: response})

    # Print the chatbot's response
    print("Chatbot: ", response)

    # Add the chatbot's response to the conversation history
    conversation_history.append(str(response))

# Print a message indicating the program is saving responses
print("Chatbot: Saving responses...")

# Save responses before exiting
save_responses(responses_dict)

print("Chatbot: Goodbye!")
